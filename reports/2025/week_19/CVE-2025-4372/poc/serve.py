#!/usr/bin/env python3
"""
Simple HTTP server to serve the CVE-2025-4372 PoC
"""

import http.server
import socketserver
import argparse
import os
import webbrowser
import time
from urllib.parse import urlparse, parse_qs

class CustomHandler(http.server.SimpleHTTPRequestHandler):
    def end_headers(self):
        # Add CORS headers to allow serving to other domains if needed
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET')
        self.send_header('Cache-Control', 'no-store, no-cache, must-revalidate')
        return super().end_headers()

    def do_GET(self):
        # Check if this is a request for the root path
        if self.path == '/':
            # Serve the menu page instead of directory listing
            self.send_response(200)
            self.send_header('Content-Type', 'text/html')
            self.end_headers()

            # Send the HTML for the menu page
            self.wfile.write(self.get_menu_html().encode())
            return

        # Handle normal file requests
        return super().do_GET()

    def get_menu_html(self):
        """Generate the HTML for the menu page"""
        return f"""<!DOCTYPE html>
<html>
<head>
    <title>CVE-2025-4372 WebAudio UAF PoC Menu</title>
    <meta charset="UTF-8">
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #2c3e50;
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #3498db;
            margin-top: 20px;
        }}
        .poc-options {{
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin: 20px 0;
        }}
        .poc-option {{
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
        }}
        .poc-option:hover {{
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }}
        .basic {{
            border-left: 5px solid #28a745;
        }}
        .advanced {{
            border-left: 5px solid #fd7e14;
        }}
        .exploit {{
            border-left: 5px solid #dc3545;
        }}
        .poc-option h3 {{
            margin-top: 0;
        }}
        .warning {{
            margin-top: 20px;
            padding: 10px 15px;
            background-color: #fff3cd;
            border-left: 5px solid #ffc107;
            border-radius: 4px;
        }}
        .button {{
            display: inline-block;
            padding: 8px 15px;
            background-color: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            font-weight: bold;
            margin-top: 10px;
        }}
        .button.basic {{
            background-color: #28a745;
            border: none;
        }}
        .button.advanced {{
            background-color: #fd7e14;
            border: none;
        }}
        .button.exploit {{
            background-color: #dc3545;
            border: none;
        }}
        .button:hover {{
            opacity: 0.9;
        }}
        .info {{
            background-color: #d1ecf1;
            border-left: 5px solid #17a2b8;
            padding: 10px 15px;
            border-radius: 4px;
            margin-top: 20px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>CVE-2025-4372 WebAudio UAF PoC</h1>

        <div class="info">
            <strong>Information:</strong> This server provides access to different Proof-of-Concept implementations
            for the CVE-2025-4372 vulnerability in Chrome's WebAudio component. Select the version you want to run.
        </div>

        <h2>Available PoC Versions</h2>

        <div class="poc-options">
            <div class="poc-option basic" onclick="window.location='index.html'">
                <h3>Basic Detection PoC</h3>
                <p>
                    A simple implementation that detects the presence of the vulnerability through memory pattern
                    analysis. This version only attempts to detect if the browser is vulnerable without
                    demonstrating code execution.
                </p>
                <a href="index.html" class="button basic">Run Basic PoC</a>
            </div>

            <div class="poc-option advanced" onclick="window.location='advanced_poc.html'">
                <h3>Advanced Detection PoC</h3>
                <p>
                    A more sophisticated PoC with detailed memory analysis, statistics tracking, and
                    comprehensive reporting capabilities. Provides in-depth information about the
                    detection process and browser environment.
                </p>
                <a href="advanced_poc.html" class="button advanced">Run Advanced PoC</a>
            </div>

            <div class="poc-option exploit" onclick="window.location='exploit_poc.html'">
                <h3>Exploit Demonstration PoC</h3>
                <p>
                    Demonstrates how the vulnerability could be exploited to execute code by attempting
                    to launch the calculator application. This version simulates the full exploitation
                    process that could lead to arbitrary code execution.
                </p>
                <a href="exploit_poc.html" class="button exploit">Run Exploit PoC</a>
            </div>
        </div>

        <div class="warning">
            <strong>Educational Purpose Only:</strong> These PoCs are designed for educational and security research
            purposes only. They demonstrate the CVE-2025-4372 vulnerability in Chrome's WebAudio component.
            The exploit version demonstrates the technique but uses simulation for safety.
        </div>
    </div>
</body>
</html>
"""

    def log_message(self, format, *args):
        # Add highlighting for interesting requests
        if args[0].startswith('GET ') and args[0].endswith(' HTTP/1.1'):
            path = args[0][4:-9]  # Extract just the path part
            # Customize log message based on request
            if path == '/':
                print(f"\033[92m[+] Browser accessing menu page\033[0m")
            elif path == '/index.html':
                print(f"\033[92m[+] Browser running Basic Detection PoC\033[0m")
            elif path == '/advanced_poc.html':
                print(f"\033[93m[+] Browser running Advanced Detection PoC\033[0m")
            elif path == '/exploit_poc.html':
                print(f"\033[91m[+] Browser running Exploit PoC\033[0m")
            else:
                super().log_message(format, *args)
        else:
            super().log_message(format, *args)

def get_local_ip():
    """Try to get the local IP address"""
    import socket
    try:
        # This doesn't actually establish a connection
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        return "127.0.0.1"  # Fallback to localhost if we can't determine IP

def main():
    parser = argparse.ArgumentParser(description='Serve CVE-2025-4372 PoC')
    parser.add_argument('--port', type=int, default=8080, help='Port to serve on (default: 8080)')
    parser.add_argument('--no-browser', action='store_true', help='Do not automatically open browser')
    parser.add_argument('--version', choices=['basic', 'advanced', 'exploit'],
                        help='Directly open a specific PoC version (basic, advanced, or exploit)')
    args = parser.parse_args()

    # Change to the directory containing this script
    os.chdir(os.path.dirname(os.path.abspath(__file__)))

    # Set up the server
    Handler = CustomHandler
    httpd = socketserver.TCPServer(("", args.port), Handler)

    # Get local IP for convenience
    local_ip = get_local_ip()

    # Print banner
    print("\033[95m" + "="*70 + "\033[0m")
    print("\033[95m  CVE-2025-4372 WebAudio Use-After-Free PoC Server\033[0m")
    print("\033[95m" + "="*70 + "\033[0m")
    print(f"\033[94m[*] Server started on port {args.port}\033[0m")
    print(f"\033[94m[*] You can access the PoC menu at:\033[0m")
    print(f"\033[92m    http://localhost:{args.port}/\033[0m")
    print(f"\033[92m    http://{local_ip}:{args.port}/\033[0m")

    # Print available PoC versions
    print("\033[94m[*] Available PoC versions:\033[0m")
    print(f"\033[92m    Basic Detection:    http://localhost:{args.port}/index.html\033[0m")
    print(f"\033[93m    Advanced Detection: http://localhost:{args.port}/advanced_poc.html\033[0m")
    print(f"\033[91m    Exploit Demo:       http://localhost:{args.port}/exploit_poc.html\033[0m")
    print(f"\033[94m[*] Press Ctrl+C to stop the server\033[0m")

    # Open browser automatically if not disabled
    if not args.no_browser:
        # Determine which URL to open
        if args.version == 'basic':
            url = f"http://localhost:{args.port}/index.html"
            print(f"\033[92m[+] Opening Basic Detection PoC in browser\033[0m")
        elif args.version == 'advanced':
            url = f"http://localhost:{args.port}/advanced_poc.html"
            print(f"\033[93m[+] Opening Advanced Detection PoC in browser\033[0m")
        elif args.version == 'exploit':
            url = f"http://localhost:{args.port}/exploit_poc.html"
            print(f"\033[91m[+] Opening Exploit PoC in browser\033[0m")
        else:
            url = f"http://localhost:{args.port}/"
            print(f"\033[94m[+] Opening PoC selection menu in browser\033[0m")

        # Short delay to ensure server is ready
        time.sleep(0.5)
        webbrowser.open(url)

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\n\033[94m[*] Server stopped\033[0m")

if __name__ == "__main__":
    main()